import numpy as npimport matplotlib.pyplot as pltimport pandas as pdfrom sklearn import datasetsfrom pprint import pprint as pp##############################          Explore                    ########################################data = datasets.load_boston()datapp(data)data.keys()features = data['data']targets = data["target"]featurestype(features)features.shapedf = pd.DataFrame(features)df.head()df.shapedf.columns = data["feature_names"]plt.scatter(df["CRIM"], targets)ymin, ymax = min(targets), max(targets)scatter = plt.scatter(df["CRIM"], df["AGE"], c=targets)plt.colorbar(scatter)def scatter_2_var(v1, v2):    plt.clf()    scatter = plt.scatter(df["CRIM"], df["AGE"], c=targets)    plt.colorbar(scatter)    plt.xlabel(v1)    plt.ylabel(v2)    plt.show()scatter_2_var("ZN", "TAX")##############################          Preprocess for learning            ########################################## Basic setupfrom sklearn.model_selection import train_test_splitX = df.valuesy = targetstest_size = 0.25## Incorrect scaling (uses test data)from sklearn.preprocessing import scaleX = scale(X)X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)## Correct scalingfrom sklearn.preprocessing import StandardScalerX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)scaler = StandardScaler().fit(X_train)X_train = scaler.transform(X_train)X_test = scaler.transform(X_test)##########################                Do some learning                    ########################################from sklearn.linear_model import LinearRegressionfrom sklearn.ensemble import RandomForestRegressorfrom sklearn.metrics import mean_absolute_error, mean_squared_errorlr = LinearRegression()lr.fit(X_train, y_train)rf = RandomForestRegressor()rf.fit(X_train, y_train)##########################                Explore results                   ########################################lr_pred = lr.predict(X_test)rf_pred = rf.predict(X_test)pred = rf_predplt.clf()plt.scatter(y_test, pred)plt.plot([y.min(), y.max()], [y.min(), y.max()], c='r', lw=2)plt.show()print("mean error:", mean_absolute_error(y_test, pred))print("mean squared error:", mean_squared_error(y_test, pred))